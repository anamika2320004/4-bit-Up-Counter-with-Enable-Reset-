//4-bit Up Counter (with Enable & Reset)
//code
module up_counter (
    input wire clk,       // clock
    input wire reset,     // active high reset
    input wire enable,    // enable counting
    output reg [3:0] count // 4-bit counter output
);

    always @(posedge clk or posedge reset) begin
        if (reset)
            count <= 4'b0000;       // reset counter to 0
        else if (enable)
            count <= count + 1;     // increment if enabled
    end
endmodule


//testbench
`timescale 1ns/1ps
module tb_up_counter;
    reg clk, reset, enable;
    wire [3:0] count;

    // Instantiate DUT
    up_counter uut (
        .clk(clk),
        .reset(reset),
        .enable(enable),
        .count(count)
    );

    // Clock generation: 10ns period
    always #5 clk = ~clk;

    initial begin
        // VCD file for EPWave
        $dumpfile("dump.vcd");
        $dumpvars(0, tb_up_counter);

        // Initialize signals
        clk = 0; reset = 1; enable = 0;

        // Apply reset
        #10 reset = 0;

        // Enable counter
        #10 enable = 1;

        // Let it count for some time
        #100;

        // Disable counter
        enable = 0;
        #30;

        // Re-enable
        enable = 1;
        #50;

        // Reset again
        reset = 1; #10; reset = 0;

        // Run more
        #50;

        $finish;
    end

    // Monitor output in console
    initial begin
        $monitor("Time=%0t | Reset=%b | Enable=%b | Count=%b", 
                  $time, reset, enable, count);
    end
endmodule
